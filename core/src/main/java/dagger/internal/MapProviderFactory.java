package dagger.internal;

import dagger.Factory;

import java.util.LinkedHashMap;
import java.util.Map;

import javax.inject.Provider;

/**
 * TODO: Insert description here. (generated by houcy)
 * @param <V>
 * @param <K>
 */
public class MapProviderFactory<K, V> implements Factory<Map<K, Provider<V>>>{
 // private final Map<K, V> contributingProviders;
  public static <K, V, T> Factory<Map<K, Provider<V>>> create(Provider<T> first,
      @SuppressWarnings("unchecked") Provider<T>... rest) {
        return null;
    
  }
  
  public static <K, V> Factory<Map<K, Provider<V>>> build(Map<K, V> map) {
    return null;
  }
  
  @Override
  public Map<K, Provider<V>> get() {
    return null;
  }
  
  public static <K, V> Map<K, V> builder() {
    //TODO (houcy)
    Map<K, V> result = new LinkedHashMap<K, V>();
    return result; 
  }
}

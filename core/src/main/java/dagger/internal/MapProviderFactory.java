package dagger.internal;

import com.google.common.collect.ImmutableMap;

import dagger.Factory;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import javax.inject.Provider;

/**
 * TODO: Insert description here. (generated by houcy)
 * @param <V>
 * @param <K>
 */
public class MapProviderFactory<K, V> implements Factory<Map<K, Provider<V>>>{
  
  public static <K, V> Factory<Map<K, Provider<V>>> create(ImmutableMap<K, Provider<V>> map) {
    return new MapProviderFactory<K, V>();
  }
  
  public static class Builder<K, V> {
    private final int size;
    
    public Builder(int size) {
      this.size = size;  
    }
    public MapProviderFactory<K, V> build() {
      return null;
    }
    
    public Builder<K, V> put(K k, Provider<V> pv) {
      return null;
    }
  }
 
  public static <K, V> Builder<K, V> builder(int size) {
    return null;
    
  }
  private MapProviderFactory() {
    
  }
  @Override
  public Map<K, Provider<V>> get() {
    Map m = new HashMap<K, Provider<V>>();
    return m;
  }
  
  
}
